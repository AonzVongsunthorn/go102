go

14:03 30 Nov 2019
Tags: golang

Pallat Anchaleechamaikorn
golang developer
Technical Coach

yod.pallat@gmail.com
https://github.com/pallat

* Array
.background ./images/whitebg.png

var name [n]T

    var array [5]string

#############################################

* Array (for)
.background ./images/whitebg.png

var name [n]T

    var array [5]string

    for i := range array {
        fmt.Println(array[i])
    }

#############################################

* Array (for)
.background ./images/whitebg.png

var name [n]T

    var array [5]string

    for i, v := range array {
        fmt.Println(i, v)
    }

#############################################

* Slice
.background ./images/whitebg.png

var name []T

    var slice []int

    primes := [...]int{2, 3, 5, 7, 11, 13}    
    slice = primes[1:4]

    for i := range slice {
        fmt.Println(slice[i])
    }

#############################################

* Zero value of slice is nil
.background ./images/whitebg.png

    var s []int

    if s == nil {
        fmt.Println("it's nil")
    }

make it first

    s := make([]int, 5)

#############################################

* append slice
.background ./images/whitebg.png

    s := []int{1, 2, 3, 4, 5}
    s = append(s, 6, 7, 8)


#############################################

* Exercise

.background ./images/whitebg.png
.link https://tour.golang.org/moretypes/18 https://tour.golang.org/moretypes/18
.link https://go-tour-th.appspot.com/moretypes/18 https://go-tour-th.appspot.com/moretypes/18

#############################################

* map[T]T
.background ./images/whitebg.png

    var m map[string]string

    if m == nil {
        fmt.Println("it's nil")
    }

#############################################

* map[T]T
.background ./images/whitebg.png

make it first

    m := make(map[string]string)

    if m == nil {
        fmt.Println("it's nil")
    }

    m["a"] = "apple"
    m["b"] = "banana"
    m["c"] = "coconut"
    m["d"] = "durian"
    m["e"] = "elderberry"
    m["f"] = "fig"
    m["g"] = "guava"

#############################################

* map[T]T
.background ./images/whitebg.png

    m := map[string]string{
        "a" : "apple",
        "b" : "banana",
        "c" : "coconut",
        "d" : "durian",
        "e" : "elderberry",
        "f" : "fig",
        "g" : "guava",
    }

    delete(m, "d")

    for k, v := range m {
        fmt.Println(k, v)
    }

#############################################

* len()
.background ./images/whitebg.png

    s := []primes{2, 3, 5, 7, 11, 13}
    m := map[string]string{
        "a" : "apple",
        "b" : "banana",
        "c" : "coconut",
        "d" : "durian",
        "e" : "elderberry",
        "f" : "fig",
        "g" : "guava",
    }

    fmt.Println(len(s), len(m))

#############################################

* Pointer
.background ./images/whitebg.png

Go has pointers. A pointer holds the memory address of a value.

The type *T is a pointer to a T value. Its zero value is nil.

    var p *int
The & operator generates a pointer to its operand.

    i := 42
    p = &i
The * operator denotes the pointer's underlying value.

    fmt.Println(*p) // read i through the pointer p
    *p = 21         // set i through the pointer p
This is known as "dereferencing" or "indirecting".

Unlike C, Go has no pointer arithmetic.

#############################################

* Type
.background ./images/whitebg.png

    type newType T

    type text string

    type aliasType = T

    type text = string

#############################################

* struct type
.background ./images/whitebg.png

    type rectangle struct {
        w,l float64
    }

#############################################

* struct usage
.background ./images/whitebg.png

    rec := rectangle{w: 10, l: 12}

    area := rec.w * rec.l

#############################################

* func type
.background ./images/whitebg.png

    type area func(float64, float64) float64 

#############################################

* method
.background ./images/whitebg.png

    type rectangle struct {
        w,l float64
    }

    func (r rectangle) area() float64 {
        return r.w * r.l
    }

#############################################

* method with pointer receiver
.background ./images/whitebg.png

    type rectangle struct {
        w,l float64
    }

    func (r *rectangle) area() float64 {
        return r.w * r.l
    }

#############################################

* method on primitive type
.background ./images/whitebg.png

    type text string

    func (t text) split(sep string) []string{
        return strings.Split(string(t), sep)
    }

#############################################

* interface{}
.background ./images/whitebg.png

empty interface

    var i interface{}

    i = 10
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = "ten"
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = struct {
        number int
        text string
    } {
        number: 10,
        text: "ten",
    }
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = func() string {
        return "10"
    }
    fmt.Printf("type is %T, value is %v\n", i, i)

#############################################

* interface: type assertion
.background ./images/whitebg.png

.play ./example/interface/assertions.go

#############################################

* interface: type switch
.background ./images/whitebg.png

.play ./example/interface/switch_type.go

#############################################

* interface 
.background ./images/whitebg.png

To define a set of method signatures

    Interfaces specify behaviors. 
    An interface type defines a set 
    of methods:


    type areaer interface {
        area() int
    }


`Interfaces` are `implemented` `implicitly`

#############################################

* interface: Stringer

.background ./images/whitebg.png

    type Stringer interface {
        String() string
    }

#############################################

* interface: error

.background ./images/whitebg.png

    type error interface {
        Error() string
    }

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer_simple.go

#############################################

* defer
.background ./images/whitebg.png

defer is stack

.play ./example/defer_stack.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer_func.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer_anonymous.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer_panic.go

#############################################

* goroutine

.background ./images/whitebg.png
.play ./example/goroutine.go /^func main/,

#############################################

* goroutine
.background ./images/whitebg.png

.play ./example/gowait.go /^func main/,

#############################################

* channel 
.background ./images/whitebg.png

keyword `chan`

    * no buffered channel
    * buffered channel

#############################################

* buffered channel
.background ./images/whitebg.png

.play ./example/chanbuf.go /^func main/,

#############################################

* no buffered channel
.background ./images/whitebg.png

.play ./example/gochan.go /^func main/,

#############################################

* Function supports

.background ./images/whitebg.png
- anonymous functions
- closures functions
- first-class functions
- variadic functions

#############################################

* Anonymous Function
.background ./images/whitebg.png
.play ./example/func_anonymous.go

#############################################

* Closure Function
.background ./images/whitebg.png
.play ./example/func_closure.go

#############################################

* Closure Function
.background ./images/whitebg.png
.play ./example/func_closure_more.go /func main/,/} // END/

#############################################

* First-Class Function
.background ./images/whitebg.png
.play ./example/func_firstclass.go
